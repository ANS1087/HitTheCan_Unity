//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input Actions/Main_Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Main_Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Main_Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Main_Controls"",
    ""maps"": [
        {
            ""name"": ""MAIN"",
            ""id"": ""78997fa1-bb18-4b5f-b29b-e09e07bab16b"",
            ""actions"": [
                {
                    ""name"": ""Reset"",
                    ""type"": ""Button"",
                    ""id"": ""3458536f-bd59-4407-b87f-0d48f0bb18d2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grab"",
                    ""type"": ""Button"",
                    ""id"": ""b4da0a80-754a-4eee-819f-059ddc6da4d7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DrawToMovement"",
                    ""type"": ""Value"",
                    ""id"": ""493ffe35-e1ca-4182-9acb-1863126fc56a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DepthMovement"",
                    ""type"": ""Value"",
                    ""id"": ""b167d625-a2cc-492a-858f-cbe373084e29"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Dis&Ang"",
                    ""type"": ""Button"",
                    ""id"": ""712d6e61-c22c-4ded-9ece-36eb092602bc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f5c8c467-edc0-4977-8137-c6790a216330"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Grab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b3253c2-225a-4f36-b9bc-612150103f87"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard"",
                    ""action"": ""Grab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ce674fc8-05ad-45f8-9723-b1b484f42162"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""DrawToMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0185ef2b-39e1-4b3c-aff0-24e1d1f3dfc9"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""DrawToMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""3e557632-da7a-44f8-8aea-983241cccce3"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DrawToMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""28b77d83-848e-48cd-ac2c-40b13090b073"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard"",
                    ""action"": ""DrawToMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""50bc63cc-551e-4af2-bb4d-844dcd310353"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard"",
                    ""action"": ""DrawToMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""dda687bd-d6cc-4b09-a461-aa8ab4925e80"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard"",
                    ""action"": ""DrawToMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ddaf80b9-bd9e-46cf-a4b2-a9623dd29c85"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard"",
                    ""action"": ""DrawToMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""fca2d1da-f65b-44f7-b662-947d88d86577"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""DepthMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""ZX"",
                    ""id"": ""03fe5f65-6028-479e-bb0b-bbf8bd28ce9e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DepthMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8ff9165a-cb9a-460c-8b4a-69b6c3e30196"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard"",
                    ""action"": ""DepthMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f2abe288-26d3-4135-9d57-88a7b64e9cb1"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard"",
                    ""action"": ""DepthMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b7588bc6-bfe9-4c3a-ad69-a95b6b8914a0"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard"",
                    ""action"": ""DepthMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""35cec45f-c9c6-4633-b05b-40a80e769aca"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard"",
                    ""action"": ""DepthMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3800cc5d-e1f9-47ea-8b9e-a82e2256d479"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d8401713-2117-4799-b357-ff5de503fffe"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard"",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f81539d4-2ba3-41d1-9068-80c0af4ec74d"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Dis&Ang"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""352f8250-0b10-4066-8dc8-3bfdb3475493"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard"",
                    ""action"": ""Dis&Ang"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""keyboard"",
            ""bindingGroup"": ""keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // MAIN
        m_MAIN = asset.FindActionMap("MAIN", throwIfNotFound: true);
        m_MAIN_Reset = m_MAIN.FindAction("Reset", throwIfNotFound: true);
        m_MAIN_Grab = m_MAIN.FindAction("Grab", throwIfNotFound: true);
        m_MAIN_DrawToMovement = m_MAIN.FindAction("DrawToMovement", throwIfNotFound: true);
        m_MAIN_DepthMovement = m_MAIN.FindAction("DepthMovement", throwIfNotFound: true);
        m_MAIN_DisAng = m_MAIN.FindAction("Dis&Ang", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MAIN
    private readonly InputActionMap m_MAIN;
    private List<IMAINActions> m_MAINActionsCallbackInterfaces = new List<IMAINActions>();
    private readonly InputAction m_MAIN_Reset;
    private readonly InputAction m_MAIN_Grab;
    private readonly InputAction m_MAIN_DrawToMovement;
    private readonly InputAction m_MAIN_DepthMovement;
    private readonly InputAction m_MAIN_DisAng;
    public struct MAINActions
    {
        private @Main_Controls m_Wrapper;
        public MAINActions(@Main_Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Reset => m_Wrapper.m_MAIN_Reset;
        public InputAction @Grab => m_Wrapper.m_MAIN_Grab;
        public InputAction @DrawToMovement => m_Wrapper.m_MAIN_DrawToMovement;
        public InputAction @DepthMovement => m_Wrapper.m_MAIN_DepthMovement;
        public InputAction @DisAng => m_Wrapper.m_MAIN_DisAng;
        public InputActionMap Get() { return m_Wrapper.m_MAIN; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MAINActions set) { return set.Get(); }
        public void AddCallbacks(IMAINActions instance)
        {
            if (instance == null || m_Wrapper.m_MAINActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MAINActionsCallbackInterfaces.Add(instance);
            @Reset.started += instance.OnReset;
            @Reset.performed += instance.OnReset;
            @Reset.canceled += instance.OnReset;
            @Grab.started += instance.OnGrab;
            @Grab.performed += instance.OnGrab;
            @Grab.canceled += instance.OnGrab;
            @DrawToMovement.started += instance.OnDrawToMovement;
            @DrawToMovement.performed += instance.OnDrawToMovement;
            @DrawToMovement.canceled += instance.OnDrawToMovement;
            @DepthMovement.started += instance.OnDepthMovement;
            @DepthMovement.performed += instance.OnDepthMovement;
            @DepthMovement.canceled += instance.OnDepthMovement;
            @DisAng.started += instance.OnDisAng;
            @DisAng.performed += instance.OnDisAng;
            @DisAng.canceled += instance.OnDisAng;
        }

        private void UnregisterCallbacks(IMAINActions instance)
        {
            @Reset.started -= instance.OnReset;
            @Reset.performed -= instance.OnReset;
            @Reset.canceled -= instance.OnReset;
            @Grab.started -= instance.OnGrab;
            @Grab.performed -= instance.OnGrab;
            @Grab.canceled -= instance.OnGrab;
            @DrawToMovement.started -= instance.OnDrawToMovement;
            @DrawToMovement.performed -= instance.OnDrawToMovement;
            @DrawToMovement.canceled -= instance.OnDrawToMovement;
            @DepthMovement.started -= instance.OnDepthMovement;
            @DepthMovement.performed -= instance.OnDepthMovement;
            @DepthMovement.canceled -= instance.OnDepthMovement;
            @DisAng.started -= instance.OnDisAng;
            @DisAng.performed -= instance.OnDisAng;
            @DisAng.canceled -= instance.OnDisAng;
        }

        public void RemoveCallbacks(IMAINActions instance)
        {
            if (m_Wrapper.m_MAINActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMAINActions instance)
        {
            foreach (var item in m_Wrapper.m_MAINActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MAINActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MAINActions @MAIN => new MAINActions(this);
    private int m_keyboardSchemeIndex = -1;
    public InputControlScheme keyboardScheme
    {
        get
        {
            if (m_keyboardSchemeIndex == -1) m_keyboardSchemeIndex = asset.FindControlSchemeIndex("keyboard");
            return asset.controlSchemes[m_keyboardSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IMAINActions
    {
        void OnReset(InputAction.CallbackContext context);
        void OnGrab(InputAction.CallbackContext context);
        void OnDrawToMovement(InputAction.CallbackContext context);
        void OnDepthMovement(InputAction.CallbackContext context);
        void OnDisAng(InputAction.CallbackContext context);
    }
}
